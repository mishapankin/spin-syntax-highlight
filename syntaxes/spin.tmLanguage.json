{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "spin",
	"patterns": [
		{
			"include": "#labels"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#declarators"
		},
		{
			"include": "#basicStatements"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#typenames"
		},
		{
			"include": "#preprocessor"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#predefinded"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#c_decl"
		}
	],
	"repository": {
		"labels": {
			"patterns": [
				{
					"name": "variable.other.label.spin",
					"match": "\\b\\w+?:"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.spin",
					"match": "\\b(atomic|break|d_step|do|od|for|in|goto|if|fi|sequence|unless|ltl)\\b"
				}
			]
		},
		"declarators": {
			"patterns": [
				{
					"name": "keyword.spin",
					"match": "\\b(active|accept|hidden|init|local|mtype|never|notrace|priority|proctype|provided|show|trace|typedef|xr|xs|c_state|c_track)\\b"
				}
			]
		},
		"basicStatements": {
			"patterns": [
				{
					"name": "keyword.spin",
					"match": "\\b(assert|assign|printf)\\b"
				}
			]
		},
		"predefinded": {
			"patterns": [
				{
					"name": "entity.name.function.spin",
					"match": "\\b(_last|_pid|_nr_pr|else|empty|enabled|eval|full|len|nempty|nfull|np_|pc_value|remoterefs|run|stdin|timeout|_)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.spin",
					"match": "//.*$"
				},
				{
					"name": "comment.block.spin",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"typenames": {
			"patterns": [
				{
					"name": "storage.type.spin",
					"match": "\\b(chan|bit|bool|byte|short|int)\\b"
				}
			]
		},
		"preprocessor": {
			"patterns": [
				{
					"name": "keyword.control.preprocessor.spin",
					"match": "^\\s*#\\w+"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.spin",
					"match": "\\b(\\d+|_)\\b"
				},
				{
					"name": "constant.language",
					"match": "\\b(true|false|skip)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.spin",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.spin",
					"match": "\\\\."
				}
			]
		},
		"c_decl": {
			"begin": ".*(c_code|c_expr|c_decl).*(\\[.*\\])?.*?\\{",
			"end": "}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.code.open"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.code.close"
				}
			},
			"name": "meta.embedded.block.c",
			"patterns": [
				{
					"include": "source.c"
				}
			]
		}
	},
	"scopeName": "source.spin"
}